<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:ehcache="http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
                    http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                    http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring
     			    http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring/ehcache-spring-1.1.xsd
     			    http://www.springframework.org/schema/aop 
     			    http://www.springframework.org/schema/aop/spring-aop-3.1.xsd"
	default-lazy-init="true">
	<import resource="applicationContext-db.xml" />
	<import resource="applicationContext-ui.xml" />

	<bean id="contextApplicationContextProvider" class="binky.reportrunner.util.ApplicationContextProvider"
		lazy-init="false" />

	<ehcache:annotation-driven cache-manager="ehCacheManager"
		create-missing-caches="true" />

	<!--Enables AspectJ auto-proxying -->
	<aop:aspectj-autoproxy />

	<bean name="auditAspect" class="binky.reportrunner.aspects.AuditAspect">
		<property name="auditService" ref="auditService" />
	</bean>


	<bean id="ehCacheManager"
		class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean" />

	<!-- properties file -->
	<bean id="myPlaceholderConfig"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:dashreports.properties</value>
			</list>
		</property>
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
	</bean>


	<bean id="quartzFactory"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="pruneEventHistoryTrigger" />
			</list>
		</property>
		<property name="overwriteExistingJobs">
			<value>true</value>
		</property>
		<property name="autoStartup">
			<value>true</value>
		</property>
		<property name="applicationContextSchedulerContextKey">
			<value>applicationContext</value>
		</property>
		<property name="waitForJobsToCompleteOnShutdown">
			<value>true</value>
		</property>
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="globalJobListeners">
			<list>
				<ref bean="runnerJobListener" />
			</list>
		</property>
		<property name="quartzProperties">
			<props>
				<!-- ThreadPool -->
				<prop key="org.quartz.threadPool.class">
					org.quartz.simpl.SimpleThreadPool
				</prop>
				<prop key="org.quartz.threadPool.threadCount">
					${org.quartz.threadPool.threadCount}
				</prop>
				<prop key="org.quartz.threadPool.threadPriority">
					${org.quartz.threadPool.threadPriority}
				</prop>

				<!-- Job store -->
				<prop key="org.quartz.jobStore.misfireThreshold">
					${org.quartz.jobStore.misfireThreshold}
				</prop>
				<prop key="org.quartz.jobStore.class">
					org.springframework.scheduling.quartz.LocalDataSourceJobStore
				</prop>
				<!-- <prop key="org.quartz.jobStore.driverDelegateClass">org.quartz.impl.jdbcjobstore.StdJDBCDelegate</prop> -->
				<prop key="org.quartz.jobStore.driverDelegateClass">
					${quartz.JDBCDelegate}
				</prop>
				<prop key="org.quartz.jobStore.useProperties">
					false
				</prop>
				<prop key="org.quartz.jobStore.selectWithLockSQL">
					SELECT * FROM {0}LOCKS UPDLOCK WHERE LOCK_NAME = ?
				</prop>


				<!-- clustering -->
				<prop key="org.quartz.jobStore.isClustered">
					${org.quartz.jobStore.isClustered}
				</prop>
				<prop key="org.quartz.jobStore.clusterCheckinInterval">
					${org.quartz.jobStore.clusterCheckinInterval}
				</prop>
				<prop key="org.quartz.scheduler.instanceId">
					${org.quartz.scheduler.instanceId}
				</prop>
			</props>
		</property>
	</bean>

	<!-- setup our scheduler singleton and the quartz bean -->
	<bean id="scheduler" class="binky.reportrunner.scheduler.impl.SchedulerImpl"
		scope="singleton">
		<property name="quartzScheduler" ref="quartzFactory" />
		<property name="clustered" value="${org.quartz.jobStore.isClustered}" />

	</bean>


	<bean name="configurationService"
		class="binky.reportrunner.service.impl.ConfigurationServiceImpl">
		<property name="configurationDao" ref="configurationDao" />
	</bean>


	<bean id="schedulerProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="targetSource">
			<bean class="org.springframework.aop.target.LazyInitTargetSource">
				<property name="targetBeanName">
					<idref local="scheduler" />
				</property>
			</bean>
		</property>
	</bean>


	<bean id="runnerJobService" class="binky.reportrunner.service.impl.ReportServiceImpl">
		<property name="scheduler" ref="schedulerProxy" />
		<property name="runnerJobDao" ref="runnerJobDao" />
		<property name="dataSourceService">
			<ref bean="runnerDatasourceService" />
		</property>
	</bean>
	<bean id="dashboardService" class="binky.reportrunner.service.impl.DashboardServiceImpl"
		lazy-init="true">
		<property name="dashboardDao">
			<ref bean="dashboardDao" />
		</property>
		<property name="datasourceService">
			<ref bean="runnerDatasourceService" />
		</property>
		<property name="scheduler" ref="schedulerProxy" />
		<property name="groupDao" ref="runnerGroupDao" />
	</bean>

	<bean id="authenticationService"
		class="binky.reportrunner.service.impl.AuthenticationServiceImpl">
		<property name="userDao">
			<ref bean="runnerUserDao" />
		</property>
	</bean>

	<bean id="userService" class="binky.reportrunner.service.impl.UserServiceImpl">
		<property name="userDao">
			<ref bean="runnerUserDao" />
		</property>

		<property name="groupDao">
			<ref bean="runnerGroupDao" />
		</property>
	</bean>

	<bean id="groupService" class="binky.reportrunner.service.impl.GroupServiceImpl">
		<property name="groupDao">
			<ref bean="runnerGroupDao" />
		</property>

	</bean>


	<bean id="noCacheInterceptor" class="binky.reportrunner.interceptors.NoCache"
		scope="singleton">
	</bean>

	<bean id="auditService" class="binky.reportrunner.service.impl.AuditServiceImpl">
		<property name="historyDao" ref="runnerHistoryDao" />
	</bean>

	<bean id="runnerJobListener" class="binky.reportrunner.scheduler.RunnerJobListener"
		lazy-init="true">
		<property name="jobService" ref="runnerJobService" />
		<property name="configurationService" ref="configurationService" />
	</bean>

	<bean id="runnerDatasourceService" class="binky.reportrunner.service.impl.DatasourceServiceImpl"
		scope="singleton">
		<property name="dataSourceDao">
			<ref bean="runnerDataSourceDao" />
		</property>
		<property name="groupDao">
			<ref bean="runnerGroupDao" />
		</property>
		<property name="secureKey" value="${reportrunner.secureKey}" />
	</bean>

	<bean name="pruneEventHistoryJob" class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="jobClass" value="binky.reportrunner.util.PruneEventHistory" />
	</bean>

	<bean id="pruneEventHistoryTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="pruneEventHistoryJob" />
		<!-- run every morning at 6 AM -->
		<property name="cronExpression" value="0 0 6 * * ?" />
	</bean>

</beans>
