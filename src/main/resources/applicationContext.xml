<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC 
	"-//SPRING//DTD BEAN//EN" 
	"http://www.springframework.org/dtd/spring-beans-2.0.dtd">
<beans>

	<import resource="applicationContext-db.xml"/>
	<import resource="applicationContext-ui.xml"/>
	

	<!--  properties file -->
	<bean id="placeholderConfig"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:application.properties</value>
				<!--  <value>classpath:application-override.properties</value> -->
			</list>
		</property>
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
	</bean>

	
	<bean id="quartzFactory"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="overwriteExistingJobs">
			<value>false</value>
		</property>
		<property name="autoStartup">
			<value>true</value>
		</property>
		<property name="applicationContextSchedulerContextKey">
			<value>applicationContext</value>
		</property>
		<property name="waitForJobsToCompleteOnShutdown">
			<value>true</value>
		</property>
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="globalJobListeners">
			<list>
				<ref bean="runnerJobListener" />
			</list>
		</property>
		<property name="quartzProperties">
			<props>
				<!-- ThreadPool -->
				<prop key="org.quartz.threadPool.class">org.quartz.simpl.SimpleThreadPool</prop>
				<prop key="org.quartz.threadPool.threadCount">${org.quartz.threadPool.threadCount}</prop>
				<prop key="org.quartz.threadPool.threadPriority">${org.quartz.threadPool.threadPriority}</prop>

				<!-- Job store -->
				<prop key="org.quartz.jobStore.misfireThreshold">${org.quartz.jobStore.misfireThreshold}</prop>
				<prop key="org.quartz.jobStore.class">org.springframework.scheduling.quartz.LocalDataSourceJobStore</prop>
				<!--
					<prop
					key="org.quartz.jobStore.driverDelegateClass">org.quartz.impl.jdbcjobstore.StdJDBCDelegate</prop>
				-->
				<prop key="org.quartz.jobStore.driverDelegateClass">${quartz.JDBCDelegate}</prop>
				<prop key="org.quartz.jobStore.useProperties">false</prop>
				<prop key="org.quartz.jobStore.selectWithLockSQL">SELECT * FROM {0}LOCKS UPDLOCK WHERE LOCK_NAME = ?</prop>

				<!-- history plugin -->
				<prop key="org.quartz.plugin.triggHistory.class">org.quartz.plugins.history.LoggingJobHistoryPlugin</prop>
			</props>
		</property>
	</bean>

	<bean id="runnerJobService" class="binky.reportrunner.service.impl.RunnerJobServiceImpl">
		<property name="scheduler" ref="scheduler" />
		<property name="runnerJobDao" ref="runnerJobDao" />
		<property name="dataSourceService">
			<ref bean="runnerDatasourceService" />
		</property>			
	</bean>
	<bean id="dashboardService" class="binky.reportrunner.service.impl.DashboardServiceImpl" scope="prototype">
		<property name="dashboardDao">
			<ref bean="dashboardDao" />
		</property>
		<property name="scheduler" ref="scheduler" />
	</bean>	
	
	<bean id="authenticationService"
		class="binky.reportrunner.service.impl.AuthenticationServiceImpl">
		<property name="userDao">
			<ref bean="runnerUserDao" />
		</property>
	</bean>
	<bean id="loginInterceptor" class="binky.reportrunner.interceptors.AuthIntercept"
		scope="singleton">
		<property name="authService">
			<ref bean="authenticationService" />
		</property>
	</bean>
	<bean id="userSessionIntercept" class="binky.reportrunner.interceptors.UserSessionIntercept"
		scope="singleton" />
	<bean id="runnerJobListener" class="binky.reportrunner.scheduler.RunnerJobListener">
		<property name="runnerHistoryDao" ref="runnerHistoryDao" />
		<property name="runnerJobDao" ref="runnerJobDao" />
		<property name="smtpServer" value="${reportrunner.smtpServer}" />
		<property name="fromAddress" value="${reportrunner.fromAddress}" />
		<property name="datasourceService">
			<ref bean="runnerDatasourceService" />
		</property>
		<property name="dashboardDao">
			<ref bean="dashboardDao" />
		</property>		
	</bean>
	<bean id="runnerDatasourceService" class="binky.reportrunner.service.impl.DatasourceServiceImpl"
		scope="singleton">		
	</bean>

</beans>